type Platform @model @auth(rules: [{allow: private, operations: [read]}, {allow: public, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String!
  games: [Game] @connection(keyName: "byPlatform", fields: ["id"])
  short_name: String
}

type Publisher @model @auth(rules: [{allow: private, operations: [read]}, {allow: public, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String!
  games: [Game] @connection(keyName: "byPublisher", fields: ["id"])
}

type Game @model(subscriptions: null) @auth(rules: [{allow: groups, groups: ["Admin"]}, {allow: private, operations: [read]}, {allow: public, operations: [read]}]) @key(name: "byPublisher", fields: ["publisher_id"]) @key(name: "byPlatform", fields: ["platform_id"]) {
  id: ID!
  title: String!
  description: String
  trailerURL: AWSURL
  imageKey: String
  price: Int
  recommanded_age: String
  release_date: AWSDate
  types: [GameType] @connection(keyName: "byGame", fields: ["id"])
  orders: [GameOrder] @connection(keyName: "byGame", fields: ["id"])
  publisher_id: ID
  platform_id: ID
  platform: Platform @connection(fields: ["platform_id"])
  publisher: Publisher @connection(fields: ["publisher_id"])
}

type Type @model(subscriptions: null) @auth(rules: [{allow: groups, groups: ["Admin"]}, {allow: private, operations: [read]}, {allow: public, operations: [read]}]) {
  id: ID!
  name: String!
  games: [GameType] @connection(keyName: "byType", fields: ["id"])
}

type GameType @model(queries: null, subscriptions: null) @key(name: "byGame", fields: ["game_id", "type_id"]) @key(name: "byType", fields: ["type_id", "game_id"]) @auth(rules: [{allow: groups, groups: ["Admin"]}, {allow: private, operations: [read]}, {allow: public, operations: [read]}]) {
  id: ID!
  game_id: ID!
  type_id: ID!
  game: Game @connection(fields: ["game_id"])
  type: Type @connection(fields: ["type_id"])
}

type GameOrder @model(queries: null, subscriptions: null) @key(name: "byGame", fields: ["game_id", "order_id"]) @key(name: "byOrder", fields: ["order_id", "game_id"]) @auth(rules: [{allow: owner, identityClaim: "email", ownerField: "customer"}, {allow: groups, groups: ["Admin"]}]) {
  id: ID!
  game_id: ID!
  order_id: ID!
  game: Game @connection(fields: ["game_id"])
  order: Order @connection(fields: ["order_id"])
}

type Order @model(subscriptions: null) @auth(rules: [{allow: owner, identityClaim: "email", ownerField: "user"}, {allow: groups, groups: ["Admin"]}]) @key(name: "byUser", fields: ["user"]) {
  id: ID!
  user: String!
  date: String
  total: Int
  country: String
  city: String
  zipCode: String
  address: String
  games: [GameOrder] @connection(keyName: "byOrder", fields: ["id"])
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus @function(name: "processPayment-${env}") @function(name: "createOrder-${env}")
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  title: String
  price: Int
  quantity: Int
}

input ProcessOrderInput {
  cart: [CartItem]
  total: Int!
  token: String!
  country: String
  city: String
  zipCode: String
  address: String
}
 